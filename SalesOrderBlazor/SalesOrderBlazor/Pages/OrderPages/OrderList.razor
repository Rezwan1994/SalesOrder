@page "/OrderPages/OrderList"
@using SalesOrderBlazor.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http
<h3>OrderList</h3>
@if(orders == null)
{
    <p><em>Loding...</em></p>
}
else
{
    <div class="col-md-12">
        <button style="float:right; width:130px" @onclick="AddOrder" class="btn-success">Add Order</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Order Id</th>
                <th>Name</th>
                <th>State</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var item in orders)
            {
                <tr>
                    <td>@item.OrderId</td>
                    <td>@item.Name</td>
                    <td>@item.State</td>
                    <td><a href="OrderPages/AddOrder/@item.OrderId">View Details</a> </td>
                    <td> <button @onclick="() => DeleteOrder(item)" class="btn btn-danger"><i class="fas fa-trash-alt"></i> Delete</button> </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    public List<Order> orders { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        orders = await Http.GetFromJsonAsync<List<Order>>("https://localhost:7274/api/Order/getOrders");
    }
    async Task DeleteOrder(Order order)
    {
        bool result = await ShowConfirmation("Are you sure you want to delete this order?");
        if (result)
        {
            orders.Remove(order);
            var data = await Http.DeleteAsync("https://localhost:7274/api/Order/deleteOrder/" + order.OrderId);
        }
    }
    private async Task<bool> ShowConfirmation(string message)
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", message);
    }
    private void AddOrder()
    {
        NavigationManager.NavigateTo("OrderPages/AddOrder");
    }
}
